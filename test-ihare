#!/usr/bin/python

# ihare - a read-eval-print loop for C/C++ programmers
#
# Copyright (C) 2009 Andy Balaam
# with python3 and tcc support by Henry Kroll III
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

import re
import os
import libigcc.runhare
from libigcc.runhare import UserInput
import libigcc.source_code_hare
import libigcc.version

class FakeWriteableFile:
	def __init__( self ):
		self.lines = []

	def write( self, line ):
		self.lines.append( line )

class FakeReadableFile:
	def __init__( self, lines ):
		self.lines = lines

	def readline( self ):
		if len( self.lines ) == 0:
			return None
		line = self.lines[0]
		self.lines = self.lines[1:]
		return line

def assert_strings_equal( str1, str2 ):
	if str1 == str2:
		return

	raise AssertionError( "\n" + str1 + "\n!=\n" + str2 )

def assert_strings_match( string, re_string ):
	cmp_re = re.compile( re_string, re.DOTALL )

	if cmp_re.match( string ):
		return

	raise AssertionError( "\n" + string
		+ "\ndoes not match regular expression\n" + re_string )

def strip_codes(text):
	# Define the regular expression pattern to match ANSI escape codes
	ansi_escape = re.compile(r'\x1b\[[0-9;]*m')
	# Use the pattern to remove the color codes from the text
	stripped_text = ansi_escape.sub('', text)
	return stripped_text

def run_program( commands, expected_output, print_welcome = False,
		argv = None ):

	outputfile = FakeWriteableFile()
	stdinfile = FakeReadableFile( commands )
	ret = libigcc.runhare.run( outputfile, stdinfile, print_welcome, argv )
	txt = "".join( outputfile.lines )
	assert_strings_equal( strip_codes(txt), expected_output )

	return ret

def run_program_regex_output( commands, expected_output_re ):
	outputfile = FakeWriteableFile()
	stdinfile = FakeReadableFile( commands )
	libigcc.runhare.run( outputfile, stdinfile, False )

	assert_strings_match( "".join( outputfile.lines ), expected_output_re )

def test_print_argv():
	commands = [ "use os;", "use fmt;", "fmt::println(os::args[1])!;" ]
	expected_output = '''hare> use os;
hare> use fmt;
hare> fmt::println(os::args[1])!;
foo
hare> 
'''
	run_program( commands, expected_output, False, ['--', 'foo'] )

def test_declare_var():
	commands = [ "let a = 0;" ]
	expected_output = 'hare> let a = 0;\nhare> \n'
	run_program( commands, expected_output )

def test_declare_var_assign():
	commands = [ "let a = 0;", "a = 10;" ]
	expected_output = 'hare> let a = 0;\nhare> a = 10;\nhare> \n'
	run_program( commands, expected_output )

def test_declare_and_assign_var_then_print():
	commands = [ "use fmt;", "let a = 10;",
		r'fmt::printfln( "{}", a )!;' ]

	expected_output = (
'''hare> use fmt;
hare> let a = 10;
hare> fmt::printfln( "{}", a )!;
10
hare> 
''' )

	run_program( commands, expected_output )


def test_print_twice():
	commands = [ "let a = 10;",
		r'fmt::printfln( "{}", a )!;',
		"a += 1;",
		r'fmt::printfln( "{}", a )!;' ]

	expected_output = (
'''hare> let a = 10;
hare> fmt::printfln( "{}", a )!;
10
hare> a += 1;
hare> fmt::printfln( "{}", a )!;
11
hare> 
''' )

	run_program( commands, expected_output )

def test_compile_error():
	commands = [ "int a" ] # no semicolon

	expected_output = (
'''hare> int a
[Compile error - type .e to see it.]
hare> 
''' )

	run_program( commands, expected_output )

def test_compile_error_display():
	commands = [
		"int a", # no semicolon
		".e" ]

	# Just look for a string "xpected" in the compiler output.
	expected_output_re = (
r'''.*expected.*''' )

	run_program_regex_output( commands, expected_output_re )


def test_include():
	commands = [
		'use glob;',
		'let g = glob::glob("*.txt", 0);',
		'for (true) match (glob::next(&g)) {',
		'   case void => break;',
		'   case let f: str =>',
		'      fmt::println(f)!;',
		'};',
		'glob::finish(&g);',
		 ]

	expected_output = (
r'''hare> use glob;
hare> let g = glob::glob("*.txt", 0);
hare> for (true) match (glob::next(&g)) {
hare>    case void => break;
hare>    case let f: str =>
hare>       fmt::println(f)!;
hare> };
COPYING.txt
README.txt
hare> glob::finish(&g);
hare> 
''' )

	run_program( commands, expected_output )

def test_multiple_repeated_includes():
	commands = [
'use io;',
'use os;',
'use strings;',
'const source = os::open("README.txt")!;',
'const source = io::drain(source)!;',
'const source = strings::fromutf8(source)!;',
'const source = strings::split(source, "\n");',
'fmt::println("The first three lines of README.txt are:")!;',
'fmt::println(source[0])!;',
'fmt::println(source[1])!;',
'fmt::println(source[2])!;',
]

	expected_output = (
r'''hare> use io;
hare> use os;
hare> use strings;
hare> const source = os::open("README.txt")!;
hare> const source = io::drain(source)!;
hare> const source = strings::fromutf8(source)!;
hare> const source = strings::split(source, "
");
hare> fmt::println("The first three lines of README.txt are:")!;
The first three lines of README.txt are:
hare> fmt::println(source[0])!;
Interactive TCC
hare> fmt::println(source[1])!;
===============
hare> fmt::println(source[2])!;

hare> 
''' )

	run_program( commands, expected_output )

def test_list_program():
	commands = [
		'let a = 0;',
		'a += 2;',
		'.l' ]

	expected_output = (
r'''hare> let a = 0;
hare> a += 2;
hare> .l


    let a = 0;
    a += 2;
hare> 
''' )

	run_program( commands, expected_output )

class FakeRunner:
	def __init__( self, user_commands_string, user_includes_string ):
		self.user_commands_string = user_commands_string
		self.user_includes_string = user_includes_string

	def get_user_commands_string( self ):
		return self.user_commands_string

	def get_user_includes_string( self ):
		return self.user_includes_string

def test_list_full_program():
	commands = [
		'let a = 0;',
		'a += 2;',
		'.L' ]

	fakerunner = FakeRunner( 'let a = 0;\n	a += 2;\n',
		"use iconv;\n" )

	expected_output = (
'''hare> let a = 0;
hare> a += 2;
hare> .L
use fmt;


export fn main() void = {
    let a = 0;
    a += 2;
};
hare> 
''')

	run_program( commands, expected_output )

def test_help_message():
	commands = [
		'.h' ]

	expected_output_re = ".*Show this help message"

	run_program_regex_output( commands, expected_output_re )

def test_quit():
	commands = [
		'.q' ]

	expected_output = "hare> .q\n\n"

	ret = run_program( commands, expected_output )

	assert_strings_equal( ret, "quit" )

def test_welcome_message():
	commands = []
	expected_output = (
'''ihare $version
Released under GNU GPL version 2 or later, with NO WARRANTY.
Get hare from https://sr.ht/~sircmpwn/hare/sources
Type ".h" for help.

hare> 
''' ).replace( "$version", libigcc.version.VERSION )

	run_program( commands, expected_output, True )

def test_include_dir_on_cmd_line():
	commands = [ 'use test;',
		'test::print(test::hello);' ]

	expected_output = (
'''hare> use test;
hare> test::print(test::hello);
Hello world!
hare> 
''' )

	argv = [ "-L", "." ]

	run_program( commands, expected_output, argv = argv )


def test_2_include_dirs_on_cmd_line():
	commands = [ 'use test;',
	    'use types::c;',
	    '@symbol("hello") fn c_hello() void;',
	    '@symbol("world") fn c_world() void;',
		'test::print(test::hello);',
		'c_hello();',
		'c_world();', ]

	expected_output = (
'''hare> use test;
hare> use types::c;
hare> @symbol("hello") fn c_hello() void;
hare> @symbol("world") fn c_world() void;
hare> test::print(test::hello);
Hello world!
hare> c_hello();
Hello, 
hare> c_world();
world!
hare> 
''' )

	argv = [ "-L.", "-lhello", "-lworld" ]
	if not os.path.isfile("libworld.so"):
	    os.system("tcc -Itest/cpp -r test/cpp/hello.h -o libhello.so")
	    os.system("tcc -Itest/cpp -r test/cpp2/world.h -o libworld.so")
	run_program( commands, expected_output, argv = argv )
	if os.path.isfile('libhello.so'):
	    os.remove('libhello.so')
	if os.path.isfile('libworld.so'):
	    os.remove('libworld.so')


def test_lib():
	commands = ['use math;',
		r'fmt::printfln("2^4={}", math::powf64(2f64,4f64))!;', ]

	expected_output = (
r'''hare> use math;
hare> fmt::printfln("2^4={}", math::powf64(2f64,4f64))!;
2^4=16
hare> 
''' )

	argv = [ ]

	run_program( commands, expected_output, argv = argv )


def test_print_license():
	commands = [ '.c' ]

	expected_output_re = (
r'''hare> \.c
.*GNU GENERAL PUBLIC LICENSE.*
hare> 
''' )

	run_program_regex_output( commands, expected_output_re )



def test_print_warranty():
	commands = [ '.w' ]

	expected_output_re = (
r'''hare> \.w
.*Disclaimer of Warranty.*
hare> 
''' )

	run_program_regex_output( commands, expected_output_re )


def test_runner_get_user_input():
	runner = libigcc.runhare.Runner( None, None, None, None, None )
	runner.user_input = [
		UserInput("0", UserInput.COMMAND),
		UserInput("1", UserInput.COMMAND),
		UserInput("2", UserInput.COMMAND) ]
	runner.input_num = 3
	assert( tuple( runner.get_user_input() ) == (
		UserInput("0", UserInput.COMMAND),
		UserInput("1", UserInput.COMMAND),
		UserInput("2", UserInput.COMMAND) ) )

	runner.input_num = 2
	assert( tuple( runner.get_user_input() ) == (
		UserInput("0", UserInput.COMMAND),
		UserInput("1", UserInput.COMMAND) ) )

	runner.input_num = 1
	assert( tuple( runner.get_user_input() ) == (
		UserInput("0", UserInput.COMMAND), ) )


def test_runner_get_user_commands():
	runner = libigcc.runhare.Runner( None, None, None, None, None )
	runner.user_input = [
		UserInput("0", UserInput.COMMAND),
		UserInput("1", UserInput.COMMAND),
		UserInput("X", UserInput.INCLUDE),
		UserInput("2", UserInput.COMMAND) ]
	runner.input_num = 4
	assert( tuple( runner.get_user_commands() ) == ( "0", "1", "2" ) )

	runner.input_num = 2
	assert( tuple( runner.get_user_commands() ) == ( "0", "1" ) )

	runner.input_num = 1
	assert( tuple( runner.get_user_commands() ) == ( "0", ) )


def test_undo_1():
	commands = [
		'let a = 0;',
		'a = 5;',
		'foobar',
		'.u',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 0;
hare> a = 5;
hare> foobar
[Compile error - type .e to see it.]
hare> .u
[Undone '    foobar'.]
hare> fmt::printfln("{}",a)!;
5
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_2():
	commands = [
		'let a = 5;',
		'a += 1;',
		'a += 1;',
		'a += 1;',
		'.u',
		'.u',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
'''hare> let a = 5;
hare> a += 1;
hare> a += 1;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .u
[Undone '    a += 1;'.]
hare> fmt::printfln("{}",a)!;
6
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_before_beginning():
	commands = [
		'let a = 5;',
		'.u',
		'.u',
		'.u',
		r'fmt::printfln("{}",a)!;',
		'.u',
		'let b = 7;',
		r'fmt::printfln("{}",b)!;',
		]

	expected_output = (
r'''hare> let a = 5;
hare> .u
[Undone '    let a = 5;'.]
hare> .u
[Nothing to undo.]
hare> .u
[Nothing to undo.]
hare> fmt::printfln("{}",a)!;
[Compile error - type .e to see it.]
hare> .u
[Undone '    fmt::printfln("{}",a)!;'.]
hare> let b = 7;
hare> fmt::printfln("{}",b)!;
7
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_includes_and_commands():
	commands = [
		'let a = 5;',
		'use math;',
		'a += 1;',
		'.u',
		'.u',
		'.u',
		]

	expected_output = (
r'''hare> let a = 5;
hare> use math;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .u
[Undone 'use math;'.]
hare> .u
[Undone '    let a = 5;'.]
hare> 
''' )

	run_program( commands, expected_output )


def test_redo_1():
	commands = [
		'let a = 1;',
		'a += 1;',
		'.u',
		'.r',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 1;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .r
[Redone '    a += 1;'.]
hare> fmt::printfln("{}",a)!;
2
hare> 
''' )

	run_program( commands, expected_output )




def test_redo_2():
	commands = [
		'let a = 1;',
		'a += 1;',
		'.u',
		'.u',
		'.r',
		'.r',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 1;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .u
[Undone '    let a = 1;'.]
hare> .r
[Redone '    let a = 1;'.]
hare> .r
[Redone '    a += 1;'.]
hare> fmt::printfln("{}",a)!;
2
hare> 
''' )

	run_program( commands, expected_output )




def test_redo_before_beginning():
	commands = [
		'let a = 1;',
		'a += 1;',
		'.u',
		'.u',
		'.u',
		'.r',
		'.r',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 1;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .u
[Undone '    let a = 1;'.]
hare> .u
[Nothing to undo.]
hare> .r
[Redone '    let a = 1;'.]
hare> .r
[Redone '    a += 1;'.]
hare> fmt::printfln("{}",a)!;
2
hare> 
''' )

	run_program( commands, expected_output )



def test_redo_after_end():
	commands = [
		'let a = 1;',
		'a += 1;',
		'.u',
		'.r',
		'.r',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 1;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .r
[Redone '    a += 1;'.]
hare> .r
[Nothing to redo.]
hare> fmt::printfln("{}",a)!;
2
hare> 
''' )

	run_program( commands, expected_output )


def test_redo_includes_and_commands():
	commands = [
		'let a = 5;',
		'use math;',
		'a += 1;',
		'.u',
		'.u',
		'.u',
		'.r',
		'.r',
		'.r',
		]

	expected_output = (
r'''hare> let a = 5;
hare> use math;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> .u
[Undone 'use math;'.]
hare> .u
[Undone '    let a = 5;'.]
hare> .r
[Redone '    let a = 5;'.]
hare> .r
[Redone 'use math;'.]
hare> .r
[Redone '    a += 1;'.]
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_then_new_commands():
	commands = [
		'let a = 5;',
		'a += 1;',
		'.u',
		'a -= 1;',
		'a -= 1;',
		'.u',
		r'fmt::printfln("{}",a)!;',
		]

	expected_output = (
r'''hare> let a = 5;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> a -= 1;
hare> a -= 1;
hare> .u
[Undone '    a -= 1;'.]
hare> fmt::printfln("{}",a)!;
4
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_redo_with_output():
	commands = [
		'let a = 56;',
		r'fmt::printfln("{}",a)!;',
		'.u',
		'.r',
		'.u',
		r'fmt::printfln("{}",12)!;',
		]

	expected_output = (
r'''hare> let a = 56;
hare> fmt::printfln("{}",a)!;
56
hare> .u
[Undone '    fmt::printfln("{}",a)!;'.]
hare> .r
[Redone '    fmt::printfln("{}",a)!;'.]
56
hare> .u
[Undone '    fmt::printfln("{}",a)!;'.]
hare> fmt::printfln("{}",12)!;
12
hare> 
''' )

	run_program( commands, expected_output )



def test_print_stderr_twice():
	commands = [ "let a = 10;",
		r'fmt::errorfln("{}", a)!;',
		"a += 1;",
		r'fmt::errorfln("{}", a)!;' ]

	expected_output = (
'''hare> let a = 10;
hare> fmt::errorfln("{}", a)!;
10
hare> a += 1;
hare> fmt::errorfln("{}", a)!;
11
hare> 
''' )

	run_program( commands, expected_output )


def test_print_stderr_stdout():
	commands = [ "let a = 10;",
		r'fmt::errorfln("{}", a)!;',
		"a += 1;",
		r'fmt::printfln("{}",a)!;' ]

	expected_output = (
'''hare> let a = 10;
hare> fmt::errorfln("{}", a)!;
10
hare> a += 1;
hare> fmt::printfln("{}",a)!;
11
hare> 
''' )

	run_program( commands, expected_output )


def test_undo_stderr_then_new_commands():
	commands = [
		'let a = 5;',
		'a += 1;',
		'.u',
		'a -= 1;',
		'a -= 1;',
		'.u',
		r'fmt::errorfln("{}", a)!;',
		]

	expected_output = (
r'''hare> let a = 5;
hare> a += 1;
hare> .u
[Undone '    a += 1;'.]
hare> a -= 1;
hare> a -= 1;
hare> .u
[Undone '    a -= 1;'.]
hare> fmt::errorfln("{}", a)!;
4
hare> 
''' )

	run_program( commands, expected_output )


def main():
	test_print_argv()
	test_declare_var()
	test_declare_var_assign()
	test_declare_and_assign_var_then_print()
	test_print_twice()
	test_compile_error()
	test_compile_error_display()
	test_include()
	test_multiple_repeated_includes()
	test_list_program()
	test_list_full_program()
	test_help_message();
	test_quit()
	test_welcome_message()
	test_include_dir_on_cmd_line()
	test_2_include_dirs_on_cmd_line()
	test_lib()
	test_print_license()
	test_print_warranty()
	test_runner_get_user_input()
	test_runner_get_user_commands()
	test_undo_1()
	test_undo_2()
	test_undo_before_beginning()
	test_undo_includes_and_commands()
	test_redo_1()
	test_redo_2()
	test_redo_before_beginning()
	test_redo_after_end()
	test_redo_includes_and_commands()
	test_undo_then_new_commands()
	test_undo_redo_with_output()
	test_print_stderr_twice()
	test_print_stderr_stdout()
	test_undo_stderr_then_new_commands()

	#test_readline_history();
	#test_print_command();
	#test_edit_in_vim();
	#test_compile_warning()
	#test_remove_compile_error_message()

	print("All tests passed.")


if __name__ == "__main__":
	main()


